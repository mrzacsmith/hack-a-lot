rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isReviewer() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'reviewer';
    }
    
    function isOwner(submissionData) {
      return request.auth.uid == submissionData.userId;
    }
    
    function hasAccess(submissionData) {
      return isAdmin() || isReviewer() || isOwner(submissionData);
    }

    function isValidStatus(status) {
      return status in ['Submitted', 'In Review', 'Commented'];
    }

    function isSuperAdmin() {
      return request.auth.token.email == 'zac@codeshock.dev';
    }

    function isSignedIn() {
      return request.auth != null;
    }

    // Users collection
    match /users/{userId} {
      // Allow read if the profile is public or if the user is the owner
      allow read: if resource.data.profile.isProfilePublic == true || request.auth.uid == userId;
      
      // Allow write only if the user is the owner
      allow write: if request.auth.uid == userId;

      // Allow users to create their own document with 'user' role
      allow create: if request.auth != null && 
                   request.auth.uid == userId && 
                   request.resource.data.role == 'user' &&
                   request.resource.data.email == request.auth.token.email &&
                   request.resource.data.createdAt is timestamp;
      
      // Allow users to update their own profile data and admins to update roles
      allow update: if request.auth != null && (
        // Users can update their own profile data
        (request.auth.uid == userId && (
          // Allow updating profile data
          request.resource.data.role == resource.data.role &&
          request.resource.data.email == resource.data.email
        )) ||
        // Super admin can update any role
        isSuperAdmin() ||
        // Admins can update roles except other admins
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' && 
         request.resource.data.role in ['user', 'reviewer', 'admin'] && 
         !(resource.data.role == 'admin' && !isSuperAdmin()))
      );

      // Allow reading the profile URL for public profiles
      match /profile {
        allow read: if resource.data.isProfilePublic == true || isOwner(userId);
        allow write: if isOwner(userId);
      }

      // Allow access to viewedReviews subcollection
      match /viewedReviews/{reviewId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Allow listing users collection for admins and super admin
    match /users/{document=**} {
      allow list: if request.auth != null && (
        isSuperAdmin() || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }

    // Submissions collection (for Submissions component)
    match /submissions/{submission} {
      allow list: if request.auth != null;  // Allow listing for all authenticated users
      
      allow create: if request.auth != null 
                   && request.resource.data.userId == request.auth.uid
                   && request.resource.data.userEmail == request.auth.token.email
                   && request.resource.data.createdAt is timestamp
                   && (!('status' in request.resource.data) || request.resource.data.status == 'pending');
      
      // Users can only see their own submissions
      allow get: if request.auth != null && request.auth.uid == resource.data.userId;
      
      allow update: if request.auth != null 
                   && hasAccess(resource.data)
                   && (
                     // Admins and reviewers can update status and add reviews
                     (
                       (isAdmin() || isReviewer()) && 
                       isValidStatus(request.resource.data.status) &&
                       request.resource.data.reviewedBy == request.auth.uid &&
                       request.resource.data.reviewedAt is timestamp
                     ) ||
                     // Users can only update their own submissions without changing status
                     (isOwner(resource.data) && request.resource.data.status == resource.data.status)
                   );
      
      allow delete: if request.auth != null && (isAdmin() || isOwner(resource.data));
    }

    // Reviews collection
    match /reviews/{review} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
                   && (isAdmin() || isReviewer())
                   && request.resource.data.reviewerId == request.auth.uid
                   && request.resource.data.createdAt is timestamp
                   && request.resource.data.comment is string
                   && request.resource.data.comment.size() > 0;
      allow update: if request.auth != null 
                   && (isAdmin() || (isReviewer() && resource.data.reviewerId == request.auth.uid));
      allow delete: if request.auth != null && isAdmin();
    }

    // Hackathons collection
    match /hackathons/{hackathon} {
      // Helper function to check user role once at this level
      function hasReviewAccess() {
        let user = get(/databases/$(database)/documents/users/$(request.auth.uid));
        return user != null && (user.data.role == 'admin' || user.data.role == 'reviewer');
      }

      // Only admins can create and delete hackathons
      allow create, delete: if request.auth != null && isAdmin();
      
      // Admins can update all fields, regular users can only update participants
      allow update: if request.auth != null && (
        isAdmin() || 
        // Allow users to update only the participants field
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants']) &&
          // Ensure other fields remain unchanged
          request.resource.data.title == resource.data.title &&
          request.resource.data.description == resource.data.description &&
          request.resource.data.startDate == resource.data.startDate &&
          request.resource.data.endDate == resource.data.endDate &&
          request.resource.data.registrationDeadline == resource.data.registrationDeadline &&
          request.resource.data.maxParticipants == resource.data.maxParticipants &&
          request.resource.data.status == resource.data.status
        )
      );
      
      // Allow public reading of active and upcoming hackathons
      allow read, list: if 
        // Allow authenticated users to read all hackathons
        request.auth != null || 
        // Allow public reading of active and upcoming hackathons
        (resource.data.status in ['active', 'upcoming']);

      // Submissions subcollection (for Reviews component)
      match /submissions/{submission} {
        // Allow reading submissions if user has review access or is the owner
        allow read: if request.auth != null && (
          hasReviewAccess() ||
          request.auth.uid == resource.data.userId
        );

        // Allow creating submissions if:
        // 1. User is authenticated
        // 2. User is registered for this hackathon
        // 3. Submission data is valid
        allow create: if request.auth != null &&
          request.auth.uid in get(/databases/$(database)/documents/hackathons/$(hackathon)).data.participants &&
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.hackathonId == hackathon &&
          request.resource.data.status == 'Submitted' &&
          request.resource.data.createdAt is timestamp;

        // Reviews subcollection
        match /reviews/{review} {
          allow read: if request.auth != null;
          allow write: if request.auth != null && 
            exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
            (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' || 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'reviewer');
        }

        // Allow updating submissions
        allow update: if request.auth != null && (
          // Admins and reviewers can update status
          ((isAdmin() || isReviewer()) && isValidStatus(request.resource.data.status)) ||
          // Users can update their own submission URL but not status
          (request.auth.uid == resource.data.userId &&
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['url']))
        );

        // Allow deleting submissions if:
        // 1. User is admin
        // 2. User is the submission owner
        allow delete: if request.auth != null && (
          isAdmin() ||
          request.auth.uid == resource.data.userId
        );
      }
    }

    // Bug Reports collection
    match /bugReports/{reportId} {
      // Allow any authenticated user to create bug reports with specific fields
      allow create: if request.auth != null
                   && request.resource.data.userId == request.auth.uid
                   && request.resource.data.timestamp is timestamp
                   && request.resource.data.status == 'new'
                   && request.resource.data.resolved == false;
      
      // Allow admins to read and manage bug reports
      allow read, update, delete: if request.auth != null && isAdmin();
    }
  }
} 