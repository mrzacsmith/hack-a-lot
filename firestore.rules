rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isReviewer() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'reviewer';
    }
    
    function isOwner(submissionData) {
      return request.auth.uid == submissionData.userId;
    }
    
    function hasAccess(submissionData) {
      return isAdmin() || isReviewer() || isOwner(submissionData);
    }

    function isValidRole(role) {
      return role in ['user', 'reviewer', 'admin'];
    }

    function isValidStatus(status) {
      return status in ['pending', 'approved', 'rejected', 'needs_revision'];
    }

    // Users collection
    match /users/{userId} {
      allow read: if request.auth != null;
      // Only allow users to update their own data, except for role changes which only admins can do
      allow update: if request.auth != null && (
        (request.auth.uid == userId && !("role" in request.resource.data)) ||
        (isAdmin() && isValidRole(request.resource.data.role))
      );
      // Only allow users to create their own document with 'user' role
      allow create: if request.auth != null && 
                   request.auth.uid == userId && 
                   request.resource.data.role == 'user' &&
                   request.resource.data.email == request.auth.token.email &&
                   request.resource.data.createdAt is timestamp;
    }

    // Submissions collection
    match /submissions/{submission} {
      allow list: if request.auth != null;  // Allow listing for all authenticated users
      
      allow create: if request.auth != null 
                   && request.resource.data.userId == request.auth.uid
                   && request.resource.data.userEmail == request.auth.token.email
                   && request.resource.data.createdAt is timestamp
                   && (!('status' in request.resource.data) || request.resource.data.status == 'pending');
      
      allow get: if request.auth != null && hasAccess(resource.data);
      
      allow update: if request.auth != null 
                   && hasAccess(resource.data)
                   && (
                     // Admins and reviewers can update status and add reviews
                     (
                       (isAdmin() || isReviewer()) && 
                       isValidStatus(request.resource.data.status) &&
                       request.resource.data.reviewedBy == request.auth.uid &&
                       request.resource.data.reviewedAt is timestamp
                     ) ||
                     // Users can only update their own submissions without changing status
                     (isOwner(resource.data) && request.resource.data.status == resource.data.status)
                   );
      
      allow delete: if request.auth != null && (isAdmin() || isOwner(resource.data));
    }

    // Reviews collection
    match /reviews/{review} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
                   && (isAdmin() || isReviewer())
                   && request.resource.data.reviewerId == request.auth.uid
                   && request.resource.data.createdAt is timestamp
                   && request.resource.data.comment is string
                   && request.resource.data.comment.size() > 0;
      allow update: if request.auth != null 
                   && (isAdmin() || (isReviewer() && resource.data.reviewerId == request.auth.uid));
      allow delete: if request.auth != null && isAdmin();
    }
  }
} 